#!/bin/zsh -feu

# This is the ALSA level way of choosing the output.

# How to get the list of controls:
# use -l option?
# am F6 & trial/error
# then:
#
# amixer -c 1 scontrols
# same as:   amixer  -c 1|grep control
#
# $ amixer -c 1   get 'Line Out'
#   pswitch
# Playback [on]
#  Front Right: Playback [on]


verbose=n
CARD=1
# known/expected controls:
auto_mute_control='Auto-Mute Mode'

line_control='Line Out'
speaker_control='Speaker'
headphones_control='Headphone'

# default outputs:
jack=0
builtin=0
phones=0

usage()
{
cat <<EOF
usage: ${0##*/} [+-jbh] [--] ARGS...

-l list the controls (of the card $CARD)

-b builtin speakers
-j line-out jack (in dock)
-p phones

EOF
}

AMIXER=(amixer -c $CARD)
master_volume=80

while getopts :bc:hjlLpv OPT; do
    case $OPT in
        j|+j)
            jack=1
            ;;
        c)
            CARD=$OPTARG
            AMIXER=(amixer -c $CARD)
            ;;
        p)
            phones=1
            ;;
        b|+b)
            builtin=1
            ;;

        l)
            $AMIXER scontrols
            echo
            # $AMIXER scontents

            $AMIXER controls| sort -n -t '=' -k '2'
            exit 0
            ;;
        L)
            master_volume=100
            ;;
        v)
            verbose=y
            ;;
        h)
            usage
            exit 0
            ;;
        *)
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

if [[ $verbose = n ]]; then
    AMIXER=(amixer -c $CARD -q)
fi

#  Items: 'Disabled' 'Speaker Only' 'Line Out+Speaker'
#  Item0: 'Line Out+Speaker'
# only to the jack:


# for `auto_mute_control'
if [[ $builtin = 1 ]]; then
    value='Disabled'
elif [[ $jack = 1 ]]; then
    value='Speaker Only'
else
    # value='Speaker Only'
    value='Line Out+Speaker'
fi

set_control()
{
    # name value
    $AMIXER cget $1
    $AMIXER cset $@
}

set_mixer_control()
{
    $AMIXER sget $1
    $AMIXER sset $@
}


# for `line_control'
if [[ $jack = 1 ]]; then
    line_out='on'
    speaker='on'

    headphone=unmuted
    headphone_value=0
elif [[ $builtin = 1 ]] then
    line_out='off'
    speaker='on'
    # fixme:
    headphone=unmuted

    headphone_value=0
else
    # phones:
    line_out='off'
    speaker='off'
    headphone=unmuted
    # headphone_value=60
fi

# both:
set_mixer_control Master on
# set_control 'Master Playback Switch' on
set_mixer_control Master $master_volume

# Auto-Mute Mode
set_mixer_control $auto_mute_control $value
$AMIXER sset 'Speaker+LO' 100


# pswitch
# value=off
set_mixer_control $line_control       $line_out
# a bit counter-intuitive, & restrictive:
set_mixer_control $speaker_control    $speaker

# set_control 'Headphone Playback Switch' $headphone
set_mixer_control $headphones_control $headphone
# set volumes:
if [[ -z ${headphone_value-} ]]; then
    set_mixer_control $headphones_control $headphone_value
fi

SET_PULSE_AUDIO=(pactl --server unix:/run/user/1000/pulse/native)

# not HDMI:
$SET_PULSE_AUDIO set-card-profile 1 output:analog-stereo+input:analog-stereo
# HDMI:
#                                               set-card-profile 0 output:hdmi-stereo+input:analog-stereo

echo >/dev/null <<EOF
https://wiki.archlinux.org/index.php/PulseAudio/Examples#HDMI_output_configuration
todo: cat /sys/class/drm/card0-DP-1/status

#
cat /sys/class/drm/card0/card0-HDMI-A-1/status
    /sys/class/drm/card0/card0-HDMI-A-2/status
    /sys/class/drm/card0/card0-HDMI-A-3/status
EOF
