#! /bin/zsh -feu

# one day I started to use zsh modules (& read the last chapter of Zsh manual)
zmodload zsh/regex
source /usr/share/zsh/functions/Misc/colors

# Dump the git history since the release which is `git-tagged', or `installed'
# not `available'

#  o  Git repository which carries a source debian package
# with
#  o  available debian package version.
#   grep-status   -F package   --regex '^make$'

readonly GIT_DESCRIBE_TAG_ERX='^(.*)-([[:digit:]]+)-g([[:alnum:]]+)$'
# 1568-rc56
#     ^ must be there


# Binary package, somehow representing the source package in that Git repo:
# is this an array?
find_installed_version()
{
    # local
    set -x
    readonly dir=$1
    readonly deb_pkg=($(deb-pkg-binary-packages $dir))
    # I could attempt all of the binary packages...
    deb-pkg-installed-version $deb_pkg[1] |tail -n 1
}


usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [+-h] [--] [dir]

dir ... by default "."

EOF
    # enters dir and compares its debian/changelog with what is installed (dpkg -l)
}

# fixme: must be invoked inside DIR.
while getopts :h OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        *)
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

if [ $# -gt 0 ]; then
    DIR=$1
else
    DIR=.
fi

# so this is the `name'
readonly deb_src_pkg=$(deb-pkg-name $DIR/debian/control*)
readonly installed_version=$(find_installed_version $DIR)

# Calculate the last release (git-tagged): number, distance:
readonly git_describe_since_last_release=$(cd $DIR; git describe --tags HEAD 2>/dev/null)

# readonly
# fixme: this does not fail if not the last!
# git_distance= $(expr match $git_describe_since_last_release $DISTANCE_FROM_DESCRIBE_RX)
[[ $git_describe_since_last_release -regex-match  $GIT_DESCRIBE_TAG_ERX ]] &&
    git_distance=$match[2]
git_tag=$match[1]
git_sha=$match[3]

# the tag is distro/version-number
readonly version_from_tag=${git_tag#*/}

# mmc: wrong:
cecho red "describe is $git_describe_since_last_release"
cecho red "distance is $git_distance"
cecho red "tag is $git_tag"
cecho red "version is $version_from_tag"

echo -ne "$bg_bold[green]$fg[red]$deb_src_pkg" $reset_color '\tis '
echoti setaf 5; echo -n $git_distance
# cecho cyan -n $git_distance
echoti setaf 7; echo " commits ahead of\t $git_tag"

echo   $bg_bold[green] $fg[red] ahoj

if [ "$version_from_tag" != "$installed_version" ]; then
    cecho blue -e "\tdifferent versions: $version_from_tag vs $installed_version"
fi

git --no-pager log --format='%C(green)%h %C(blue)%s' $git_tag..HEAD
# git log --oneline $git_tag..HEAD
echo



if false; then
    if [ "$version_from_tag" != "$installed_version" ]; then
        cecho red -e $deb_src_pkg  '\t' $git_describe_since_last_release  '\t installed:' $installed_version
    else
        cecho reset -e $deb_src_pkg  '\t' $git_describe_since_last_release
        #   '\t installed:' $version
    fi
fi
