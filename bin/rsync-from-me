#! /usr/bin/zsh -feu

# I run this script to RSYNC the source tree faithfully from my
# (at the moment remote) workstation to BUILD server (localhost).

# The tree is in a SOURCE_REPO, and is synced to some ROOT directory
# on the localhost.

# The config files itself are expected inside ROOT, so rsync can update them.
# hopefully not overwrite while it's executing.

# those are:  .rsync.env .rsync-ignore

# see example .rsync-ignore...
# to avoid copying cscope* files, and also the git files -- not relevant
# for building.

# Since the source tree on the build server contans (unfortunately)
# the build results, I make the rsync ignore those too.

# there are 2 grades of ignoring files:
# 1/ make sure it's not on the build host -- actively remove it
# 2/ ignore it. -- this has the annoying effect of reporting parent
#   dirs as non-removable as non-empty.


# For the build to succeed -- to nont consult the version control for example,
# I need some more fake files. Created them once:

# mkdir .repo;
# mkdir kernel/.git;

# I could create a "dont-delete" file inside them...
# ... as I use   "dont-delete" files to keep directories present.



# how to bootstrap:
# on server:
#    mkdir DIR2
#    mkdir .repo;  touch .repo/dont-delete
#    mkdir kernel/.git; touch kernel/.git/dont-delete

# on workstation:
#    scp  DIR/rsync*  server:DIR2/
# then on the server:
#    DIR2/rsync-from-me


# How to invoke:
# invoked in CWD -> these files are located:
# .rsync.env  and .rsync.ignore
# If not found -> exit.
# then parameters are ... the subdirs.

die()
{
    echo $@ >&2
    exit 1;
}

if getopt -T; then # should test (( $? = -4 ))
    echo "incompatible  getopt(1) installed. Abort"
    exit -1
fi



if ! [ -e .rsync.env -a -e .rsync-ignore ]; then
    die "missing .rsync.env (or .rsync-ignore) file in $(pwd)"
fi

source .rsync.env

# sanity check:
if [ -z "${SOURCE_REPO-}" ]; then
    die "the env file does not define the SOURCE_REPO"
fi
if [ -z "${RSYNC_RULES-}" ]; then
    die "the env file does not define the RSYNC_RULES"
fi

do_rsync()
{
    if [ $ECHO_RSYNC_COMMAND = y ]; then set -x;fi

    # fixme: choose the local from $ROOT or $SOURCE_REPO
    time rsync --exclude-from=./.rsync-ignore \
	$GLOBAL_OPTIONS \
	--recursive --archive \
	 \
	$TRANSFER_OPTIONS \
	$RSYNC_RULES \
	"$@"

    if [ $ECHO_RSYNC_COMMAND = y ]; then set +x;fi
}

unsetopt FUNCTION_ARGZERO
usage()
{
    cat >&2 <<EOF
usage: ${0##*/} [+-i] [--]  dir...
-i --hide-progress   don't show per-file progress-bar
-d --delete          delete also
-s --size-only       look at size, not time. (fixme: or --content?)
-v --verbose
-n --dry
EOF
}


ECHO_RSYNC_COMMAND=n

TRANSFER_OPTIONS=(--partial --bwlimit=100)
LOG_OPTIONS=()
LOG_OPTIONS_RO=(--itemize-changes --human-readable)
CHECK_OPTIONS=(--times)

delete_level=0

GLOBAL_OPTIONS=(--hard-links)
interactive="yes"

# todo: delete=no
# no,limit,yes
cmd_options=$(getopt --name $0 --shell bash \
 	      --longoptions hide-progress,verbose,dry,size-only,delete,source: \
 	      --options ivnfsd -- "$@") || { usage && exit 1 }
eval set -- "$cmd_options"

ROOT=$(pwd)

while (( $# > 0 )) do
    case $1 in
	#process_rest "$@"
	-i | --hide-progress )
	      interactive=no
	      ;;
	-v | --verbose ) # verbose
	    LOG_OPTIONS=($LOG_OPTIONS_RO)
	    ECHO_RSYNC_COMMAND=y
	    ;;
	-n| +n)
	    GLOBAL_OPTIONS+=(--dry-run)
	    LOG_OPTIONS=($LOG_OPTIONS_RO)
	    ;;
	-d | --delete )
	    ((delete_level+=1))
	    ;;
	-f)
	    GLOBAL_OPTIONS+=($TRANSFER_OPTIONS)
	    ;;
	-s | --size-only )			# don't check time, but size.
	    GLOBAL_OPTIONS+=(--size-only)
	    ;;
	--)
	    shift
	    break
	    ;;
	--source )
	    SOURCE_REPO=$2
	    shift
	    ;;
	*)
	    echo $1>&2
	    usage
	    exit 2
    esac
    shift
done

typeset -a DELETE_OPTIONS
DELETE_OPTIONS=()

if [ $delete_level -gt 0 ]; then
    DELETE_OPTIONS=(--delete --delete-excluded)

    if [ $delete_level -gt 1 ]; then
	# DELETE_OPTIONS+=($DELETE_OPTIONS_UNSAFE)
    else
	DELETE_OPTIONS+=(--max-delete 100)
    fi
fi


GLOBAL_OPTIONS+=($DELETE_OPTIONS)

if [ $interactive = "yes" ]; then
   LOG_OPTIONS+=(--progress)
fi

GLOBAL_OPTIONS+=($LOG_OPTIONS)

if test $# -gt 0;
then
# must contain the trailing /
    for subdir
    # in $@
    do
	# note: I do append the "/" after ROOT
	do_rsync --relative "$SOURCE_REPO/./$subdir"  $ROOT/
    done
else
    do_rsync $SOURCE_REPO/   $ROOT/
fi


# options:
# dry
# careful -- slow & limit deletes & verbose
# fast
