#!/bin/zsh -feu

source /usr/share/mmc-shell/git-functions.sh
source /usr/share/mmc-shell/mmc-functions.sh
colors

# set -x
usage() {
    setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [-h] [-f] [--] [remote-or-branch]

Fast-forward to remote head, stashing around.
-f not only fast-forward !
-b rebase.

-h help
By default {branch} is the current one on the favorite remote.

EOF
    unsetopt POSIX_ARGZERO
}

force=n
rebase=n
while getopts :bhf OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        b)
            rebase=y
            ;;
        f)
            force=y
            ;;
        *)
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

if [[ $# -gt 1 ]]; then
    usage >&2
    exit 2
fi

# find where to
if [[ $# -gt 0 ]]; then
    # $1 is remote or remote-branch

    if is_git_remote_branch $1
    then
        # select the branch
        target=remotes/$1
    elif is_git_remote $1
    then
        GIT_REMOTE_NAME=$1
        # todo: the same I'm on
        current_branch=$(current_branch_name)
        target=$GIT_REMOTE_NAME/$current_branch
    else
        target=$1
    fi
    shift
else
    # find the friend remote:
    set_remote_name

    # todo: the same I'm on
    current_branch=$(current_branch_name)

    # default:
    target=$GIT_REMOTE_NAME/$current_branch
fi



# if the fast-forward would move ahead!

git_ff_to_cautiously()
{
    # given $ref and $force
    local ref=$1

    # unless we are on it already:
    if [[ $(git rev-parse HEAD) != $(git rev-parse $ref) ]]; then

        if [[ $rebase = y ]];
        then
            git rebase --autosquash $ref
            cecho hiyellow "ff & unstashed"
        elif [[ $force = y || $(git rev-parse HEAD) = $(git merge-base HEAD $ref) ]]
        then
            if git merge --ff-only $ref;
            then
                cecho hiyellow "ff (without conflicts w/ dirty files)"
            else
                # touching timestamps:
                stash_if_non_clean "merge fast-forward"

                if [[ $force = y ]]; then
                    git reset --hard $ref
                else
                    # git checkout $branch
                    git merge --ff-only $ref
                fi
                unstash_if_stashed
                cecho hiyellow "ff & unstashed"
            fi
        else
            # todo: if ancestor, print a different message.
            echo >&2 cannot fast-forward to $ref $fg[red]not our descendant$reset_color
        fi
    fi
}

git_ff_to_cautiously $target
