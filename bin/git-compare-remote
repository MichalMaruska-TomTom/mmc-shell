#!/bin/zsh -eu

source /usr/share/mmc-shell/git-functions.sh
source /usr/share/mmc-shell/mmc-functions.sh
colors

usage()
{
    setopt POSIX_ARGZERO
    cat <<EOF
usage: ${0##*/} [+-h] [-q] [--] [remote] [branch]

remote is by default the "favourite" one.
-q  don't dump the commits

EOF
}


# Given 2 commits as parameters ... look at the lattice
# return 1 if A < B
# 0 if  A=B
# 1 less
# 2 more
# 3  incomparable
# 4 error?

#  uses $verbose
compare_commits()
{
    # the sha?
    # $(git rev-parse $1)
    # local
    readonly first=$(git log $1 --max-count=1 --format="%H")
    readonly second=$(git log $2 --max-count=1 --format="%H")

    if [[ -z "$first" || -z "$second" ]]; then
        if [[ $verbose = y ]]; then echo "$first $second" >&2;fi
        return 4
    fi
    if [[ $first = $second ]]; then
        return 0;
    fi

    readonly common=$(git merge-base $first $second)
    if [ $? != 0 ]; then
        if [ $verbose = y ]; then echo "no common merge-base">&2;fi
        return 4;
    fi

    if [ $common = $second ]; then
        return 1;
    elif [ $common = $first ]; then
        return 2;
        # -1 is nonsense if ever a standalone,
        # but it got delivered as -1 as function!
    else
        return 3
    fi
}

verbose=y
while getopts :hqv OPT; do
    case $OPT in
        h|+h)
            usage
            exit 0
            ;;
        q)
            verbose="n"
            ;;
        v)
            set -x
            ;;
        *)
            usage >&2
            exit 2
    esac
done
shift OPTIND-1
OPTIND=1

# the remote:
set_remote_name

if [ $# -gt 1 ]; then
    GIT_REMOTE_NAME=$1
    shift
fi

# the branch
if [ $# -gt 1 ]; then
    branch=$1
    shift
else
    branch=$(current_branch_name)
fi

# so the remote branch:
REMOTE=remotes/$GIT_REMOTE_NAME/$branch


# I need the exit status, and it won't be zero:
# could compare with FETCH_HEAD

# Zsh claims that in && expressions all but the last don't make -e trigger the exit.
compare_commits $branch $REMOTE && :
cmp=$?

args=(--max-count 15)
case $cmp in
    0)
        cecho bold "same"
        ;;
    1)
        echo "HEAD $fg_bold[green]$bg[red]ahead$reset_color of $REMOTE"

        if [ $verbose = y ]; then
            git diff --shortstat  $REMOTE
            git log $args --oneline $REMOTE..HEAD --
        fi
        ;;
    2)
        cecho hiyellow "local is behind"
        if [ $verbose = y ]; then
            git log $args --oneline HEAD..$REMOTE --
        fi
        ;;
    4)
        echo "error in comparing $branch & FETCH_HEAD"
        ;;
    3)
        cecho red "diverged"
        ;;
    *)
        echo "error while comparing: $cmp"
esac

exit 0
